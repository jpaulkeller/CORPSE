package db;import java.io.Serializable;/** * DatabaseDriver is an abstract class used to define the necessary * String constants and methods required for a vendor-dependent * Driver. * * For example, if one wanted to create a Driver that supports an * Oracle connection, one would create a class called OracleDriver * that extends DatabaseDriver, set the DRIVER_STRING and URL_STRING * to "oracle.jdbc.driver.OracleDriver" and "jdbc:oracle:thin:@" * respectively, implement the abstract methods and compile the class. * * Then, all one would need to do to connect to the Oracle database is * specify "Oracle" in the system property file for the jdbc.DbName * property. * * Note: all Driver classes must be in this package. */public abstract class DatabaseDriver implements Serializable{   private static final long serialVersionUID = 1L;   public abstract String getDriverString();   public abstract String getUrlString();   public String getTableCatString()   {      return "TABLE_CAT";   }   public String getTableSchemString()   {      return "TABLE_SCHEM";   }   public String getMultiCharWc()   {      return "%";   }   public String getSingleCharWc()   {      return "_";   }   public int getMaxVarcharLen()   {      return 255;   }   public int getMaxVarbinaryLen()   {      return 255;   }   public int getMaxCharLen()   {      return 255;   }   /**    * Return the driver's largest searchable text field type.  Some    * drivers (e.g., Access) may need to override this to return a    * value like "MEMO".    */   public String getTextType()   {      return "TEXT";   }   /**    * Some drivers (e.g., Postgres) may need to override this to return    * a value like "''".    */   public String getNullValue()   {      return "null";   }   /**    * Some drivers (e.g., HSQL) may need to override this to return    * an operator like "is".    */   public String getNullEqualsOperator()   {      return "=";   }   /**    * Function used to turn a character string to uppercase.  UPPER is    * the commonly used name, however some drivers may need to    * override this to return a different name (e.g. Access uses    * UCASE), or to return null if they do not support this    * functionality.    */   public String getUppercaseFunction()   {      return "UPPER";   }   /**    * Date/time specification format.  Some drivers may need to    * override this to return a different format.    */   public String getTimestampFormat()   {      return "yyyy-MM-dd HH:mm:ss.SSS";   }   /**    * Character used to quote date/time values.  Some drivers may need to    * override this to return a different format.    */   public String getDateTimeQuote()   {      return "'";   }   /**    * This method is used to translate a type (from sql.Types) to a    * database dependent string describing the column.  If no    * translations are necessary, you do not need to override this    * method.  But, if a translation is required, override in the    * appropriate driver, and do the translation.  See OracleDriver    * for an example.    */   public boolean translateJdbcType (final Column column)   {      return false;   }   /**    * Return true if exception message contains in regards to a bad connection    * Some drivers may need to override this depending on the bad connection message.    */   public boolean isBadConnection (final String exceptionMessage)   {      return (exceptionMessage != null &&              exceptionMessage.indexOf ("Connection is broken") >= 0);   }}